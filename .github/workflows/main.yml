name: DevSecOps Pipeline with Vulnerability Management

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [app3, app2, app1]  # List all applications here

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Install dependencies for each app
      - name: Install dependencies for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src
          python -m pip install --upgrade pip
          
          pip install bandit  # Install Bandit
          pip install pytest  # Install pytest if not already in requirements.txt

          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found for ${{ matrix.app }}"
          fi

      # Run Unit Tests for each app
      - name: Run Unit Tests for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          pytest --maxfail=1 --disable-warnings
        continue-on-error: true

      # Run SAST with Bandit for each app
      - name: Run SAST with Bandit for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          bandit -r . || true
        continue-on-error: true

     # Install OWASP Dependency-Check
      - name: Install OWASP Dependency-Check
        run: |
          # Install unzip if not available
          sudo apt-get update
          sudo apt-get install -y unzip
          # Download the OWASP Dependency-Check release
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.1/dependency-check-6.5.1-release.zip
          # Verify the download
          if [ ! -f "dependency-check-6.5.1-release.zip" ]; then
            echo "Dependency-Check ZIP download failed!"
            exit 1
          fi
          # Unzip the downloaded file
          unzip dependency-check-6.5.1-release.zip -d /opt/
          # Check the contents of the unzipped directory
          ls /opt/dependency-check*
          # Create a symbolic link for easier access
          ln -s /opt/dependency-check/bin/dependency-check /usr/local/bin/dependency-check

      # Run Dependency-Check for each app
      - name: Run Dependency-Check for ${{ matrix.app }}
        run: |
          # Run Dependency-Check for the application
          dependency-check --project ${{ matrix.app }} --scan $GITHUB_WORKSPACE/src/${{ matrix.app }} --out $GITHUB_WORKSPACE/src/${{ matrix.app }}/dependency-check-report
        continue-on-error: true

       # Build Docker image for each app
      - name: Build Docker image for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          docker build -t ${{ matrix.app }} -f Dockerfile .

      # Set up Trivy to scan Docker image for each app
      - name: Set up Trivy for ${{ matrix.app }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.app }}:latest
        continue-on-error: true

      # Scan Docker image for vulnerabilities with Trivy
      - name: Scan Docker image for vulnerabilities with Trivy for ${{ matrix.app }}
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ matrix.app }}:latest || true
