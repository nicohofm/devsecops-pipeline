name: DevSecOps Pipeline with Vulnerability Management

on:
  push:
    branches:
      - tim_dev

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [app3, app2, app1]  # List all applications here

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Install dependencies for each app
      - name: Install dependencies for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src
          python -m pip install --upgrade pip
          pip install bandit
          pip install pytest  
          pip install flask

      # Run Unit Tests for each app
      - name: Run Unit Tests for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          pytest --maxfail=1 --disable-warnings
        continue-on-error: true

      # Run SAST with Bandit for each app
      - name: Run SAST with Bandit for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          bandit -r . || true
        continue-on-error: true

      # Install OWASP Dependency-Check
      - name: Install OWASP Dependency-Check
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.1/dependency-check-6.5.1-release.zip
          if [ ! -f "dependency-check-6.5.1-release.zip" ]; then
            echo "Dependency-Check ZIP download failed!"
            exit 1
          fi
          unzip dependency-check-6.5.1-release.zip -d /opt/
          if [ ! -f "/opt/dependency-check/bin/dependency-check.sh" ]; then
            echo "Dependency-Check executable not found!"
            exit 1
          fi
          sudo ln -s /opt/dependency-check/bin/dependency-check.sh /usr/local/bin/dependency-check

      # Run Dependency-Check for each app
      - name: Run Dependency-Check for ${{ matrix.app }}
        run: |
          # Sicherstellen, dass das Ausgabe-Verzeichnis existiert
          mkdir -p $GITHUB_WORKSPACE/src/${{ matrix.app }}/dependency-check-report
          
          # Dependency-Check ausführen und Ergebnisse im Report-Verzeichnis speichern
          dependency-check --project ${{ matrix.app }} --scan $GITHUB_WORKSPACE/src/${{ matrix.app }} --out $GITHUB_WORKSPACE/src/${{ matrix.app }}/dependency-check-report

          # Ausgabe des Verzeichnisinhalts zur Überprüfung
          echo "Contents of the dependency-check-report directory:"
          ls -al $GITHUB_WORKSPACE/src/${{ matrix.app }}/dependency-check-report
        continue-on-error: true

      # Upload Dependency-Check Report als Artefakt (nach Verzeichnisüberprüfung)
      - name: Upload Dependency-Check Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report-${{ matrix.app }}
          path: $GITHUB_WORKSPACE/src/${{ matrix.app }}/dependency-check-report/
          if-no-files-found: warn  # Warnung statt Fehler, wenn keine Dateien gefunden werden

      # Build Docker image for each app
      - name: Build Docker image for ${{ matrix.app }}
        run: |
          cd $GITHUB_WORKSPACE/src/${{ matrix.app }}
          docker build -t ${{ matrix.app }} -f Dockerfile .

      # Set up Trivy to scan Docker image for each app
      - name: Set up Trivy for ${{ matrix.app }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.app }}:latest
        continue-on-error: true

      # Scan Docker image for vulnerabilities with Trivy
      - name: Scan Docker image for vulnerabilities with Trivy for ${{ matrix.app }}
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ matrix.app }}:latest || true

